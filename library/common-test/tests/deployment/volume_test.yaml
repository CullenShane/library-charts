suite: deployment volume test
templates:
  - common.yaml
tests:
  - it: should pass with default values
    documentIndex: &deploymentDoc 0
    asserts:
      - hasDocuments:
          count: 2
      - isKind:
          of: Deployment
      - isNull:
          path: spec.template.spec.volume

  - it: should pass with added emptyDir volume
    documentIndex: *deploymentDoc
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          sizeLimit: 1Gi
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              sizeLimit: 1Gi

  - it: should pass with added emptyDir volume and no sizeLimit
    documentIndex: *deploymentDoc
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir: {}

  - it: should pass with added emptyDir volume memory backed with sizeLimit
    documentIndex: *deploymentDoc
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          medium: Memory
          sizeLimit: 1Gi
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              medium: Memory
              sizeLimit: 1Gi

  - it: should pass with added emptyDir volume memory backed with sizeLimit via tpl
    documentIndex: *deploymentDoc
    set:
      some_medium: Memory
      some_size: 1Gi
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          medium: "{{ .Values.some_medium }}"
          sizeLimit: "{{ .Values.some_size }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              medium: Memory
              sizeLimit: 1Gi

  - it: should pass with added emptyDir volume memory backed and no sizeLimit
    documentIndex: *deploymentDoc
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          medium: Memory
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              medium: Memory

  - it: should fail with added emptyDir and non Memory medium
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          medium: not_memory
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: You can only set <medium> as Memory on item (volume1)

  - it: should pass with added nfs
    documentIndex: *deploymentDoc
    set:
      persistence:
        volume1:
          enabled: true
          type: nfs
          server: some.server.local
          path: /nfs/path
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            nfs:
              server: some.server.local
              path: /nfs/path

  - it: should pass with added hostPath
    documentIndex: *deploymentDoc
    set:
      persistence:
        volume1:
          enabled: true
          type: hostPath
          hostPath: /mnt/pool/test
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            hostPath:
              path: /mnt/pool/test

  - it: should pass with added hostPath and hostPathType set via tpl
    documentIndex: *deploymentDoc
    set:
      some_key: Directory
      persistence:
        volume1:
          enabled: true
          type: hostPath
          hostPathType: "{{ .Values.some_key }}"
          hostPath: /mnt/pool/test
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            hostPath:
              path: /mnt/pool/test
              type: Directory

  - it: should fail with wrong persistence type
    set:
      persistence:
        some_volume:
          type: not_valid_persistence
          enabled: true
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: Not a valid persistence.type (not_valid_persistence)

  - it: should fail with not set objectName on configMaps
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should fail with not set objectName on secrets
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should fail with not set path on hostPath
    set:
      persistence:
        some_volume:
          type: hostPath
          enabled: true
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: hostPath not set on item some_volume

  - it: should fail with not set server on nfs
    set:
      persistence:
        some_volume:
          type: nfs
          enabled: true
          path: some_path
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: NFS Server not set on item some_volume

  - it: should fail with not set path on nfs
    set:
      persistence:
        some_volume:
          type: nfs
          enabled: true
          server: some_server
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: NFS Path not set on item some_volume

  - it: should fail with not set objectName on secret
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should fail with not set objectName on configmap
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should pass with added secret
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          noMount: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            secret:
              secretName: some_object_name

  - it: should pass with added secret and defaultMode as int
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          defaultMode: 777
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            secret:
              secretName: some_object_name
              defaultMode: 777

  - it: should pass with added secret and defaultMode as string
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          defaultMode: "777"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            secret:
              secretName: some_object_name
              defaultMode: 777

  - it: should pass with added secret and defaultMode as int from tpl
    documentIndex: *deploymentDoc
    set:
      mode: 644
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          defaultMode: "{{ .Values.mode }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            secret:
              secretName: some_object_name
              defaultMode: 644

  - it: should pass with added secret and defaultMode as string from tpl
    documentIndex: *deploymentDoc
    set:
      mode: "644"
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          defaultMode: "{{ .Values.mode }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            secret:
              secretName: some_object_name
              defaultMode: 644

  - it: should fail with added secret and no key on items
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          items:
            - path: some_path
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: No key was given for persistence item some_volume

  - it: should fail with added secret and no path on items
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          items:
            - key: some_key
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: No path was given for persistence item some_volume

  - it: should pass with added secret and items
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          items:
            - key: some_key
              path: some_path
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            secret:
              secretName: some_object_name
              items:
                - key: some_key
                  path: some_path

  - it: should pass with added secret and items from tpl
    documentIndex: *deploymentDoc
    set:
      key: some_key
      path: some_path
      persistence:
        some_volume:
          type: secret
          enabled: true
          objectName: some_object_name
          items:
            - key: "{{ .Values.key }}"
              path: "{{ .Values.path }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            secret:
              secretName: some_object_name
              items:
                - key: some_key
                  path: some_path

  - it: should fail with not set objectName on configMap
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should pass with added configMap
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            configMap:
              name: some_object_name

  - it: should pass with added configMap and defaultMode as int
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          defaultMode: 777
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            configMap:
              name: some_object_name
              defaultMode: 777

  - it: should pass with added configMap and defaultMode as string
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          defaultMode: "777"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            configMap:
              name: some_object_name
              defaultMode: 777

  - it: should pass with added configMap and defaultMode as int from tpl
    documentIndex: *deploymentDoc
    set:
      mode: 644
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          defaultMode: "{{ .Values.mode }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            configMap:
              name: some_object_name
              defaultMode: 644

  - it: should pass with added configMap and defaultMode as string from tpl
    documentIndex: *deploymentDoc
    set:
      mode: "644"
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          defaultMode: "{{ .Values.mode }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            configMap:
              name: some_object_name
              defaultMode: 644

  - it: should pass with added configMap and items
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          items:
            - key: some_key
              path: some_path
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            configMap:
              name: some_object_name
              items:
                - key: some_key
                  path: some_path

  - it: should fail with added configMap and no key on items
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          items:
            - path: some_path
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: No key was given for persistence item some_volume

  - it: should fail with added configMap and no path on items
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          items:
            - key: some_key
          noMount: true
    asserts:
      - failedTemplate:
          errorMessage: No path was given for persistence item some_volume

  - it: should pass with added configMap and items from tpl
    documentIndex: *deploymentDoc
    set:
      key: some_key
      path: some_path
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_object_name
          items:
            - key: "{{ .Values.key }}"
              path: "{{ .Values.path }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            configMap:
              name: some_object_name
              items:
                - key: some_key
                  path: some_path

  - it: should pass with added PVC
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: pvc
          enabled: true
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            persistentVolumeClaim:
              claimName: RELEASE-NAME-common-test-some_volume

  - it: should pass with added PVC and existingClaim
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: pvc
          enabled: true
          existingClaim: some_existing_claim
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            persistentVolumeClaim:
              claimName: some_existing_claim

  - it: should pass with added PVC and existingClaim from tpl
    documentIndex: *deploymentDoc
    set:
      claim: some_existing_claim
      persistence:
        some_volume:
          type: pvc
          enabled: true
          existingClaim: "{{ .Values.claim }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            persistentVolumeClaim:
              claimName: some_existing_claim

  - it: should pass with added PVC and nameOverride
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: pvc
          enabled: true
          nameOverride: some_claim
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            persistentVolumeClaim:
              claimName: RELEASE-NAME-common-test-some_claim

  - it: should pass with added PVC and nameOverride from tpl
    documentIndex: *deploymentDoc
    set:
      claim: some_claim
      persistence:
        some_volume:
          type: pvc
          enabled: true
          nameOverride: "{{ .Values.claim }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            persistentVolumeClaim:
              claimName: RELEASE-NAME-common-test-some_claim

  - it: should pass with added PVC and forceName
    documentIndex: *deploymentDoc
    set:
      persistence:
        some_volume:
          type: pvc
          enabled: true
          forceName: forced_name
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            persistentVolumeClaim:
              claimName: forced_name

  - it: should pass with added PVC and forceName from tpl
    documentIndex: *deploymentDoc
    set:
      claim: forced_name
      persistence:
        some_volume:
          type: pvc
          enabled: true
          forceName: "{{ .Values.claim }}"
          noMount: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: some_volume
            persistentVolumeClaim:
              claimName: forced_name
