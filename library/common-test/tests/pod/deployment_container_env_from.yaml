suite: deployment container envFrom test
templates:
  - common.yaml
tests:
  - it: should pass with default values
    asserts:
      - documentIndex: &deploymentDoc 0
        isKind:
          of: Deployment

  - it: should fail with envFrom configMapRef has empty name
    set:
      envFrom:
        - configMapRef:
            name: ""
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Name is required for configMapRef in envFrom.

  - it: should fail with envFrom secretRef has empty name
    set:
      envFrom:
        - secretRef:
            name: ""
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Name is required for secretRef in envFrom.

  - it: should fail with envFrom secretRef has missing name
    set:
      envFrom:
        - secretRef:
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Not valid Ref or <name> key is missing in envFrom.

  - it: should fail with envFrom configMapRef has missing name
    set:
      envFrom:
        - configMapRef:
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Not valid Ref or <name> key is missing in envFrom.

  - it: should pass with envFrom configMapRef entry added
    set:
      envFrom:
        - configMapRef:
            name: some_name
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].envFrom
          value:
            - configMapRef:
                name: some_name

  - it: should pass with envFrom configMapRef entries added from tpl
    set:
      some_name: a_name
      some_name2: a_name2
      envFrom:
        - configMapRef:
            name: "{{ .Values.some_name }}"
        - configMapRef:
            name: "{{ .Values.some_name2 }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].envFrom
          value:
            - configMapRef:
                name: a_name
            - configMapRef:
                name: a_name2

  - it: should pass with envFrom secretRef entry added
    set:
      envFrom:
        - secretRef:
            name: some_name
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].envFrom
          value:
            - secretRef:
                name: some_name

  - it: should pass with envFrom secretRef entries added from tpl
    set:
      some_name: a_name
      some_name2: a_name2
      envFrom:
        - secretRef:
            name: "{{ .Values.some_name }}"
        - secretRef:
            name: "{{ .Values.some_name2 }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].envFrom
          value:
            - secretRef:
                name: a_name
            - secretRef:
                name: a_name2

  - it: should pass with envFrom secretRef and configMapRef entries added from tpl
    set:
      some_name: a_name
      some_name2: a_name2
      envFrom:
        - secretRef:
            name: "{{ .Values.some_name }}"
        - configMapRef:
            name: "{{ .Values.some_name2 }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].envFrom
          value:
            - secretRef:
                name: a_name
            - configMapRef:
                name: a_name2
