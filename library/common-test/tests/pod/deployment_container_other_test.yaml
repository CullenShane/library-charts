
suite: deployment container various options test
templates:
  - common.yaml
tests:
  - it: should pass with default values
    asserts:
      - documentIndex: &deploymentDoc 0
        isKind:
          of: Deployment

  - it: should pass with tty set
    set:
      tty: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].tty
          value: true

  - it: should pass with stdin set
    set:
      stdin: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].stdin
          value: true

  - it: should pass with gracePeriodSeconds set
    set:
      termination:
        gracePeriodSeconds: 25
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 25

  - it: should pass with schedulerName set
    set:
      schedulerName: some_scheduler
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.schedulerName
          value: some_scheduler

  - it: should pass with schedulerName set from tpl
    set:
      name: some_scheduler
      schedulerName: "{{ .Values.name }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.schedulerName
          value: some_scheduler

  - it: should pass with schedulerName set
    set:
      priorityClassName: some_priority_class_name
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.priorityClassName
          value: some_priority_class_name

  - it: should pass with schedulerName set from tpl
    set:
      name: some_priority_class_name
      priorityClassName: "{{ .Values.name }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.priorityClassName
          value: some_priority_class_name

  - it: should pass with terminationMessagePath set
    set:
      termination:
        messagePath: /tmp/log
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePath
          value: /tmp/log

  - it: should pass with terminationMessagePath set from tpl
    set:
      some_path: /tmp/log
      termination:
        messagePath: "{{ .Values.some_path }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePath
          value: /tmp/log

  - it: should pass with terminationMessagePolicy set
    set:
      termination:
        messagePolicy: FallbackToLogsOnError
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePolicy
          value: FallbackToLogsOnError

  - it: should pass with terminationMessagePolicy set from tpl
    set:
      some_key: FallbackToLogsOnError
      termination:
        messagePolicy: "{{ .Values.some_key }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePolicy
          value: FallbackToLogsOnError

  - it: should fail with invalid terminationMessagePolicy
    set:
      some_key: invalid
      termination:
        messagePolicy: "{{ .Values.some_key }}"
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Not valid option for messagePolicy

  - it: should fail with no command in preStop
    set:
      lifecycle:
        preStop:
          command: ""
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: No commands were given for preStop lifecycle hook

  - it: should fail with no command in postStart
    set:
      lifecycle:
        postStart:
          command: ""
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: No commands were given for postStart lifecycle hook
