
suite: deployment container various options test
templates:
  - common.yaml
tests:
  - it: should pass with default values
    asserts:
      - documentIndex: &deploymentDoc 0
        isKind:
          of: Deployment

  - it: should pass with tty set
    set:
      tty: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].tty
          value: true

  - it: should pass with stdin set
    set:
      stdin: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].stdin
          value: true

  - it: should pass with gracePeriodSeconds set
    set:
      termination:
        gracePeriodSeconds: 25
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 25

  - it: should pass with schedulerName set
    set:
      schedulerName: some_scheduler
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.schedulerName
          value: some_scheduler

  - it: should pass with schedulerName set from tpl
    set:
      name: some_scheduler
      schedulerName: "{{ .Values.name }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.schedulerName
          value: some_scheduler

  - it: should pass with schedulerName set
    set:
      priorityClassName: some_priority_class_name
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.priorityClassName
          value: some_priority_class_name

  - it: should pass with schedulerName set from tpl
    set:
      name: some_priority_class_name
      priorityClassName: "{{ .Values.name }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.priorityClassName
          value: some_priority_class_name

  - it: should pass with terminationMessagePath set
    set:
      termination:
        messagePath: /tmp/log
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePath
          value: /tmp/log

  - it: should pass with terminationMessagePath set from tpl
    set:
      some_path: /tmp/log
      termination:
        messagePath: "{{ .Values.some_path }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePath
          value: /tmp/log

  - it: should pass with terminationMessagePolicy set
    set:
      termination:
        messagePolicy: FallbackToLogsOnError
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePolicy
          value: FallbackToLogsOnError

  - it: should pass with terminationMessagePolicy set from tpl
    set:
      some_key: FallbackToLogsOnError
      termination:
        messagePolicy: "{{ .Values.some_key }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.containers[0].terminationMessagePolicy
          value: FallbackToLogsOnError

  - it: should fail with invalid terminationMessagePolicy
    set:
      some_key: invalid
      termination:
        messagePolicy: "{{ .Values.some_key }}"
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Not valid option for messagePolicy

  - it: should fail with no command in preStop
    set:
      lifecycle:
        preStop:
          command: ""
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: No commands were given for preStop lifecycle hook

  - it: should fail with no command in postStart
    set:
      lifecycle:
        postStart:
          command: ""
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: No commands were given for postStart lifecycle hook

  - it: should fail with no value in a key in nodeSelector
    set:
      nodeSelector:
        diskType:
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Value is required on every key in <nodeSelector>

  - it: should pass with nodeSelector set
    set:
      nodeSelector:
        diskType: ssd
        cpuType: intel
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.nodeSelector
          value:
            diskType: ssd
            cpuType: intel

  - it: should pass with nodeSelector set from tpl
    set:
      some_key: ssd
      some_other_key: intel
      nodeSelector:
        diskType: "{{ .Values.some_key }}"
        cpuType: "{{ .Values.some_other_key }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.nodeSelector
          value:
            diskType: ssd
            cpuType: intel

  - it: should fail with invalid operator in tolerations
    set:
      tolerations:
        - operator: invalid_op
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Invalid <operator>. Valid options are Exists, Equal.

  - it: should fail with invalid effect in tolerations
    set:
      tolerations:
        - effect: invalid_effect
          operator: Exists
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Invalid <effect>. Valid options are NoExecute, NoSchedule, PreferNoSchedule

  - it: should fail with empty key and operator Equal in tolerations
    set:
      tolerations:
        - key: ""
          operator: Equal
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: <key> is required when <operator> is set to <Equal>

  - it: should fail with operator Exists and defined value in tolerations
    set:
      tolerations:
        - value: something
          operator: Exists
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: When <operator> is set to <Exists>, you cannot define a <value>

  - it: should fail with operator Exists and non-integer tolerationSeconds in tolerations
    set:
      tolerations:
        - tolerationSeconds: not_an_int
          operator: Exists
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: <tolerationSeconds> must result to an integer.

  - it: should pass with tolerations defined, with tolerationSeconds set
    set:
      tolerations:
        - operator: Exists
          tolerationSeconds: 6000
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Exists
              tolerationSeconds: 6000

  - it: should pass with tolerations defined, with only operator Exists
    set:
      tolerations:
        - operator: Exists
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Exists

  - it: should pass with tolerations defined, with only operator Exists from tpl
    set:
      op: Exists
      tolerations:
        - operator: "{{ .Values.op }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Exists

  - it: should pass with tolerations defined, with only operator Equal and key defined
    set:
      tolerations:
        - operator: Equal
          key: key1
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Equal
              key: key1

  - it: should pass with tolerations defined, with only operator Equal and key defined from tpl
    set:
      some_key: key1
      tolerations:
        - operator: Equal
          key: "{{ .Values.some_key }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Equal
              key: key1

  - it: should pass with tolerations defined, with operator Exists and effect defined
    set:
      tolerations:
        - operator: Exists
          effect: NoExecute
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Exists
              effect: NoExecute

  - it: should pass with tolerations defined, with operator Exists and effect defined from tpl
    set:
      ef1: NoExecute
      tolerations:
        - operator: Exists
          effect: "{{ .Values.ef1 }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Exists
              effect: NoExecute

  - it: should pass with tolerations defined, with operator Equal and value defined
    set:
      tolerations:
        - operator: Equal
          value: some_value
          key: key1
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Equal
              value: some_value
              key: key1

  - it: should pass with tolerations defined, with operator Equal and value defined from tpl
    set:
      val: some_value
      tolerations:
        - operator: Equal
          value: "{{ .Values.val }}"
          key: key1
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Equal
              value: some_value
              key: key1

  - it: should pass with tolerations defined, with operator Equal and value defined from tpl
    set:
      val: some_value
      tolerations:
        - operator: Equal
          value: "{{ .Values.val }}"
          key: key1
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Equal
              value: some_value
              key: key1

  - it: should pass with tolerations defined, with everything set, multiple entries
    set:
      tolerations:
        - operator: Equal
          value: some_value
          key: key1
          effect: NoExecute
          tolerationSeconds: 6000
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Equal
              value: some_value
              key: key1
              effect: NoExecute
              tolerationSeconds: 6000

  - it: should pass with tolerations defined, with everything set from tpl, multiple entries
    set:
      op1: Equal
      val1: some_value1
      k1: key1
      ef1: NoExecute
      op2: Equal
      val2: some_value2
      k2: key2
      ef2: NoSchedule
      tolerations:
        - operator: "{{ .Values.op1 }}"
          value: "{{ .Values.val1 }}"
          key: "{{ .Values.k1 }}"
          effect: "{{ .Values.ef1 }}"
          tolerationSeconds: 6000
        - operator: "{{ .Values.op2 }}"
          value: "{{ .Values.val2 }}"
          key: "{{ .Values.k2 }}"
          effect: "{{ .Values.ef2 }}"
          tolerationSeconds: 6000
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.tolerations
          value:
            - operator: Equal
              value: some_value1
              key: key1
              effect: NoExecute
              tolerationSeconds: 6000
            - operator: Equal
              value: some_value2
              key: key2
              effect: NoSchedule
              tolerationSeconds: 6000
