
suite: deployment dns-network test
templates:
  - common.yaml
tests:
  - it: should pass with default values
    asserts:
      - documentIndex: &deploymentDoc 0
        isKind:
          of: Deployment

  - it: should pass with hostNetwork set
    set:
      hostNetwork: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.hostNetwork
          value: true

  - it: should pass with hostname set
    set:
      hostname: some_hostname
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.hostname
          value: some_hostname

  - it: should pass with hostname set from tpl
    set:
      name: some_hostname
      hostname: "{{ .Values.name }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.hostname
          value: some_hostname

  - it: should pass with enableServiceLinks set
    set:
      enableServiceLinks: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.enableServiceLinks
          value: true

  - it: should fail with invalid dnsPolicy
    set:
      dnsPolicy: invalid
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: Not valid dnsPolicy. Valid options are ClusterFirst, Default, ClusterFirstWithHostNet, None

  - it: should pass with changed dnsPolicy
    set:
      dnsPolicy: Default
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsPolicy
          value: Default

  - it: should pass with hostNet dnsPolicy
    set:
      hostNetwork: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsPolicy
          value: ClusterFirstWithHostNet

  - it: should pass with hostNet and changed dnsPolicy
    set:
      dnsPolicy: Default
      hostNetwork: true
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsPolicy
          value: Default

  - it: should fail with more than 3 nameservers
    set:
      dnsConfig:
        nameservers:
          - ns1
          - ns2
          - ns3
          - ns4
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: There can be at most 3 nameservers specified in dnsConfig

  - it: should fail with more than 6 domain searches
    set:
      dnsConfig:
        searches:
          - domain_search_1
          - domain_search_2
          - domain_search_3
          - domain_search_4
          - domain_search_5
          - domain_search_6
          - domain_search_7
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: There can be at most 6 search domains specified in dnsConfig

  - it: should fail with no nameservers and dnsPolicy set to None
    set:
      dnsPolicy: None
    asserts:
      - failedTemplate:
          documentIndex: *deploymentDoc
          errorMessage: With dnsPolicy set to None, you must specify at least 1 nameservers on dnsConfig

  - it: should pass with dnsConfig defined
    set:
      dnsConfig:
        nameservers:
          - ns1
          - ns2
        searches:
          - domain_search_1
          - domain_search_2
        options:
          - name: ndots
            value: 2
          - name: edns0
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsConfig
          value:
            nameservers:
              - ns1
              - ns2
            searches:
              - domain_search_1
              - domain_search_2
            options:
              - name: ndots
                value: "2"
              - name: edns0

  - it: should pass with dnsConfig nameservers only
    set:
      dnsConfig:
        nameservers:
          - ns1
          - ns2
          - 1.1.1.1
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsConfig
          value:
            nameservers:
              - ns1
              - ns2
              - 1.1.1.1

  - it: should pass with dnsConfig searches only
    set:
      dnsConfig:
        searches:
          - domain_search_1
          - domain_search_2
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsConfig
          value:
            searches:
              - domain_search_1
              - domain_search_2

  - it: should pass with dnsConfig options only
    set:
      dnsConfig:
        options:
          - name: ndots
            value: 2
          - name: edns0
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsConfig
          value:
            options:
              - name: ndots
                value: "2"
              - name: edns0

  - it: should pass with dnsConfig nameservers only from tpl
    set:
      ns1: ns1
      dnsConfig:
        nameservers:
          - "{{ .Values.ns1 }}"
          - ns2
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsConfig
          value:
            nameservers:
              - ns1
              - ns2

  - it: should pass with dnsConfig searches only from tpl
    set:
      ds: domain_search_1
      dnsConfig:
        searches:
          - "{{ .Values.ds }}"
          - domain_search_2
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsConfig
          value:
            searches:
              - domain_search_1
              - domain_search_2

  - it: should pass with dnsConfig options only from tpl
    set:
      opt1_name: ndots
      opt1_value: 2
      opt2_name: edns0
      dnsConfig:
        options:
          - name: "{{ .Values.opt1_name }}"
            value: "{{ .Values.opt1_value }}"
          - name: "{{ .Values.opt2_name }}"
    asserts:
      - equal:
          documentIndex: *deploymentDoc
          path: spec.template.spec.dnsConfig
          value:
            options:
              - name: ndots
                value: "2"
              - name: edns0
