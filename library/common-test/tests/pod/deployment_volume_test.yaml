suite: deployment volume test
templates:
  - common.yaml
tests:
  - it: should pass with default values
    asserts:
      - documentIndex: &deploymentDoc 0
        isKind:
          of: Deployment
      - isNull:
          path: spec.template.spec.volume

  - it: should pass with added emptyDir volume
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          sizeLimit: 1Gi
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              sizeLimit: 1Gi

  - it: should pass with added emptyDir volume and no sizeLimit
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir: {}

  - it: should pass with added emptyDir volume memory backed with sizeLimit
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          medium: Memory
          sizeLimit: 1Gi
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              medium: Memory
              sizeLimit: 1Gi

  - it: should pass with added emptyDir volume memory backed with sizeLimit via tpl
    set:
      some_medium: Memory
      some_size: 1Gi
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          medium: "{{ .Values.some_medium }}"
          sizeLimit: "{{ .Values.some_size }}"
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              medium: Memory
              sizeLimit: 1Gi

  - it: should pass with added emptyDir volume memory backed and no sizeLimit
    set:
      persistence:
        volume1:
          enabled: true
          type: emptyDir
          medium: Memory
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            emptyDir:
              medium: Memory

  - it: should pass with added nfs
    set:
      persistence:
        volume1:
          enabled: true
          type: nfs
          server: some.server.local
          path: /nfs/path
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            nfs:
              server: some.server.local
              path: /nfs/path

  - it: should pass with added hostPath
    set:
      persistence:
        volume1:
          enabled: true
          type: hostpath
          hostPath: /mnt/pool/test
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            hostPath:
              path: /mnt/pool/test

  - it: should pass with added hostPath and hostPathType set via tpl
    set:
      some_key: Directory
      persistence:
        volume1:
          enabled: true
          type: hostpath
          hostPathType: "{{ .Values.some_key }}"
          hostPath: /mnt/pool/test
    asserts:
      - equal:
          path: spec.template.spec.volumes[0]
          value:
            name: volume1
            hostPath:
              path: /mnt/pool/test
              type: Directory

  - it: should fail with wrong persistence type
    set:
      persistence:
        some_volume:
          type: not_valid_persistence
          enabled: true
    asserts:
      - failedTemplate:
          errorMessage: Not a valid persistence.type (not_valid_persistence)

  - it: should fail with not set objectName on configMaps
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should fail with not set objectName on secrets
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should fail with not set path on hostPath
    set:
      persistence:
        some_volume:
          type: hostPath
          enabled: true
    asserts:
      - failedTemplate:
          errorMessage: hostPath not set on item some_volume

  - it: should fail with not set server on nfs
    set:
      persistence:
        some_volume:
          type: nfs
          enabled: true
          path: some_path
    asserts:
      - failedTemplate:
          errorMessage: NFS Server not set on item some_volume

  - it: should fail with not set path on nfs
    set:
      persistence:
        some_volume:
          type: nfs
          enabled: true
          server: some_server
    asserts:
      - failedTemplate:
          errorMessage: NFS Path not set on item some_volume

  - it: should fail with not set objectName on secret
    set:
      persistence:
        some_volume:
          type: secret
          enabled: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should fail with not set objectName on configmap
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume

  - it: should pass with added configmap
    set:
      persistence:
        some_volume:
          type: configMap
          enabled: true
          objectName: some_name
    asserts:
      - failedTemplate:
          errorMessage: objectName not set for persistence item some_volume


# TODO: configmap
# TODO: secret
# TODO: PVC
